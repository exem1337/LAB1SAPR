#include <uf.h>
#include <uf_curve.h>
#include <uf_csys.h>
#include <uf_modl.h>
//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  D:\parasha\siemens\lab4\lab4.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: Alexander.Chernyakov
//              Version: Mechatronics Concept Designer 2027
//              Date: 12-16-2023  (Format: mm-dd-yyyy)
//              Time: 23:05 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "lab4.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session* (lab4::theSession) = NULL;
UI* (lab4::theUI) = NULL;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
lab4::lab4()
{
    try
    {
        // Initialize the NX Open C++ API environment
        lab4::theSession = NXOpen::Session::GetSession();
        lab4::theUI = UI::GetUI();
        theDlxFileName = "lab4.dlx";
        theDialog = lab4::theUI->CreateDialog(theDlxFileName);
        // Registration of callback functions
        theDialog->AddApplyHandler(make_callback(this, &lab4::apply_cb));
        theDialog->AddOkHandler(make_callback(this, &lab4::ok_cb));
        theDialog->AddUpdateHandler(make_callback(this, &lab4::update_cb));
        theDialog->AddInitializeHandler(make_callback(this, &lab4::initialize_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &lab4::dialogShown_cb));
    }
    catch (exception& ex)
    {
        //---- Enter your exception handling code here -----
        throw;
    }
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
lab4::~lab4()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}
//------------------------------- DIALOG LAUNCHING ---------------------------------
//
//    Before invoking this application one needs to open any part/empty part in NX
//    because of the behavior of the blocks.
//
//    Make sure the dlx file is in one of the following locations:
//        1.) From where NX session is launched
//        2.) $UGII_USER_DIR/application
//        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
//            recommended. This variable is set to a full directory path to a file 
//            containing a list of root directories for all custom applications.
//            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
//
//    You can create the dialog using one of the following way:
//
//    1. USER EXIT
//
//        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
//        2) Invoke the Shared Library through File->Execute->NX Open menu.
//
//------------------------------------------------------------------------------
extern "C" DllExport void  ufusr(char* param, int* retcod, int param_len)
{
    lab4* thelab4 = NULL;
    try
    {
        thelab4 = new lab4();
        // The following method shows the dialog immediately
        thelab4->Show();
    }
    catch (exception& ex)
    {
        //---- Enter your exception handling code here -----
        lab4::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    if (thelab4 != NULL)
    {
        delete thelab4;
        thelab4 = NULL;
    }
}

//------------------------------------------------------------------------------
// This method specifies how a shared image is unloaded from memory
// within NX. This method gives you the capability to unload an
// internal NX Open application or user  exit from NX. Specify any
// one of the three constants as a return value to determine the type
// of unload to perform:
//
//
//    Immediately : unload the library as soon as the automation program has completed
//    Explicitly  : unload the library from the "Unload Shared Image" dialog
//    AtTermination : unload the library when the NX session terminates
//
//
// NOTE:  A program which associates NX Open applications with the menubar
// MUST NOT use this option since it will UNLOAD your NX Open application image
// from the menubar.
//------------------------------------------------------------------------------
extern "C" DllExport int ufusr_ask_unload()
{
    //return (int)Session::LibraryUnloadOptionExplicitly;
    return (int)Session::LibraryUnloadOptionImmediately;
    //return (int)Session::LibraryUnloadOptionAtTermination;
}

//------------------------------------------------------------------------------
// Following method cleanup any housekeeping chores that may be needed.
// This method is automatically called by NX.
//------------------------------------------------------------------------------
extern "C" DllExport void ufusr_cleanup(void)
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch (exception& ex)
    {
        //---- Enter your exception handling code here -----
        lab4::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

int lab4::Show()
{
    try
    {
        theDialog->Show();
    }
    catch (exception& ex)
    {
        //---- Enter your exception handling code here -----
        lab4::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//---------------------Block UI Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void lab4::initialize_cb()
{
    try
    {
        group0 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group0"));
        drawingArea0 = dynamic_cast<NXOpen::BlockStyler::DrawingArea*>(theDialog->TopBlock()->FindBlock("drawingArea0"));
        Ra = dynamic_cast<NXOpen::BlockStyler::StringBlock*>(theDialog->TopBlock()->FindBlock("Ra"));
        Rb = dynamic_cast<NXOpen::BlockStyler::StringBlock*>(theDialog->TopBlock()->FindBlock("Rb"));
        Rc = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("Rc"));
        Rd = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("Rd"));
        Re = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("Re"));
        Rf = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("Rf"));
        Rg = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("Rg"));
        Rh = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("Rh"));
        block_create = dynamic_cast<NXOpen::BlockStyler::Button*>(theDialog->TopBlock()->FindBlock("block_create"));
        //------------------------------------------------------------------------------
        //Registration of StringBlock specific callbacks
        //------------------------------------------------------------------------------
        //Ra->SetKeystrokeCallback(make_callback(this, &lab4::KeystrokeCallback));

        //------------------------------------------------------------------------------
    }
    catch (exception& ex)
    {
        //---- Enter your exception handling code here -----
        lab4::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void lab4::dialogShown_cb()
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch (exception& ex)
    {
        //---- Enter your exception handling code here -----
        lab4::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int lab4::apply_cb()
{
    int errorCode = 0;
    try
    {
        //---- Enter your callback code here -----
    }
    catch (exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        lab4::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
UF_CURVE_line_t line[12];
tag_t objarray[12]; //теги для трех линий и дуги 
void DrawElem(int i, double y, double z, double y1, double z1)
{
    //Так как сечение будет располагаться в плоскости ZY
    // координата Х для всех объектов будет равна 0
    double x = 0;
    line[i].start_point[0] = x;// X1
    line[i].start_point[1] = y;// Y1
    line[i].start_point[2] = z;// Z1
    line[i].end_point[0] = x;// X2 
    line[i].end_point[1] = y1;// Y2 
    line[i].end_point[2] = z1;// Z2
    // построение линии
    UF_CURVE_create_line(&line[i], &objarray[i]);
}

int lab4::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
    try
    {
        if (block == drawingArea0)
        {
            //---------Enter your code here-----------
        }
        else if (block == Ra)
        {
            //---------Enter your code here-----------
        }
        else if (block == Rb)
        {
            //---------Enter your code here-----------
        }
        else if (block == Rc)
        {
            //---------Enter your code here-----------
        }
        else if (block == Rd)
        {
            //---------Enter your code here-----------
        }
        else if (block == Re)
        {
            //---------Enter your code here-----------
        }
        else if (block == Rf)
        {
            //---------Enter your code here-----------
        }
        else if (block == Rg)
        {
            //---------Enter your code here-----------
        }
        else if (block == Rh)
        {
            //---------Enter your code here-----------
        }
        else if (block == block_create)
        {
            //---------Enter your code here-----------
            char a[] = "0.0";
            char b[125];
            sprintf(b, "%f", Rf->Value());

            char* limit[2] = { a, b };
            //орты вектора направления выдавливания 
            double direction[3] = { 1.0, 0.0, 0.0 };
            //признак создания самостоятельного тела 
            UF_FEATURE_SIGN create = UF_NULLSIGN;
            //заготовки указателей на перечии объектов 
            uf_list_p_t loop_list, //Список объектов, подлежащих выдавливанию (элементы сечения)
                features; //Список созданных идентификаторов объектов
            //угол конусности в градусах
            char t_a[] = "0.0";
            char* taper_angle = t_a;
            //параметр не используется
            double ref_pt[3];
            double y, z, y1, z1;
            if (!UF_initialize())
            {
                //левая вертикаль
                y = 0; z = 0; y1 = 0;
                z1 = atof(Ra->Value().getText());// 
                DrawElem(0, y, z, y1, z1);
                //верхняя левая горизонталь
                y = 0; z = z1;
                y1 = (Rg->Value() - atof(Rb->Value().getText())) / 2;
                DrawElem(1, y, z, y1, z1);
                //вниз левая короткая
                y = y1; z = z1; z1 = atof(Ra->Value().getText()) - Rc->Value();
                DrawElem(2, y, z, y1, z1);
                //верхняя короткая
                y = y1; z = z1; y1 = y1 + atof(Rb->Value().getText());
                DrawElem(3, y, z, y1, z1);
                //вверх правая короткая
                y = y1; z = z1; z1 = atof(Ra->Value().getText());
                DrawElem(4, y, z, y1, z1);
                //верхняя правая горизонталь
                y = y1; z = z1; y1 = Rg->Value();
                DrawElem(5, y, z, y1, z1);
                //правая вертикаль вниз
                y = y1; z = z1; z1 = 0;
                DrawElem(6, y, z, y1, z1);
                //правая нижняя короткая
                y = y1; z = z1; y1 = Rg->Value() - (Rg->Value() - Rh->Value()) / 2;
                DrawElem(7, y, z, y1, z1);
                //нижняя наклонная правая
                y = y1; z = z1; y1 = Rg->Value() - (Rg->Value() - Rd->Value()) / 2; z1 = Re->Value();
                DrawElem(8, y, z, y1, z1);
                //нижняя средняя
                y = y1; z = z1; y1 = (Rg->Value() - Rd->Value()) / 2;

                DrawElem(9, y, z, y1, z1);
                //нижняя наклонная левая
                y = y1; z = z1; y1 = (Rg->Value() - Rh->Value()) / 2; z1 = 0;
                DrawElem(10, y, z, y1, z1);
                //левая нижняя короткая
                y = y1; z = z1; y1 = 0;
                DrawElem(11, y, z, y1, z1);
                //создание пустого перечня объектов
                UF_MODL_create_list(&loop_list);
                //заполнение перечня тремя линиями и одной дугой 
                for (int i = 0; i < 12; i++)
                    UF_MODL_put_list_item(loop_list, objarray[i]);
                //создание операции выдавливания
                UF_MODL_create_extruded(loop_list, taper_angle, limit,
                    ref_pt, direction, create, &features);
                UF_terminate();
            }
        }

    }
}
catch (exception& ex)
{
    //---- Enter your exception handling code here -----
    lab4::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
}
return 0;
}

//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int lab4::ok_cb()
{
    int errorCode = 0;
    try
    {
        errorCode = apply_cb();
    }
    catch (exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        lab4::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}
//------------------------------------------------------------------------------
//StringBlock specific callbacks
//------------------------------------------------------------------------------
//int lab4::KeystrokeCallback (NXOpen::BlockStyler::StringBlock* string_block, NXString uncommitted_value)
//{
//}

//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Function Name: GetBlockProperties
//Description: Returns the propertylist of the specified BlockID
//------------------------------------------------------------------------------
PropertyList* lab4::GetBlockProperties(const char* blockID)
{
    return theDialog->GetBlockProperties(blockID);
}
